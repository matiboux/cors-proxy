name: Push Docker CD

on:

  # Run on push on primary branches
  push:
    branches:
      - main # Production
    paths:
      # CI files
      - '.github/workflows/push.yml'
      - 'docker-compose.yml'
      - '.env'
      # Application files
      - 'proxy/**'

  # Run on manual triggers
  workflow_dispatch:

# Set GITHUB_TOKEN permissions for the workflow
permissions:
  contents: read

# Set workflow concurrency rules
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # Push Docker job
  push:
    name: Push Docker
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Set GITHUB_TOKEN permissions for the job
    permissions:
      contents: read
      packages: write

    # Set environment variables for the job
    env:
      REGISTRY: ghcr.io

    # Set outputs
    outputs:
      IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}

    steps:

      # Steps dependencies

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set DEPLOY_ENV environment variable
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          # Set DEPLOY_ENV environment variable
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            DEPLOY_ENV="PROD"
          else
            DEPLOY_ENV="DEV"
          fi
          echo "Set DEPLOY_ENV to '${DEPLOY_ENV}'"
          echo 'DEPLOY_ENV<<GITHUB_ENV_EOF' >> $GITHUB_ENV
          echo "${DEPLOY_ENV}" >> $GITHUB_ENV
          echo 'GITHUB_ENV_EOF' >> $GITHUB_ENV

      # Execution steps

      - name: Login to GitHub Docker registry (GitHub Container Registry)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for production
        env:
          IMAGES_PREFIX: 'app'
          IMAGES_TAG: ${{ github.sha }}
        run: |
          # docker compose build
          docker compose \
              -f ./docker-compose.yml \
              --env-file .env \
              build

      - name: Set IMAGES_PREFIX for GitHub Docker registry images
        env:
          REGISTRY: ${{ env.REGISTRY }}
          NAMESPACE: ${{ github.repository_owner }}
          IMAGES_NAME: ${{ github.event.repository.name }}
        run: |
          # Set IMAGES_PREFIX environment variable

          # Transform variables to lowercase
          REGISTRY="$(echo "${REGISTRY}" | tr '[:upper:]' '[:lower:]')"
          NAMESPACE="$(echo "${NAMESPACE}" | tr '[:upper:]' '[:lower:]')"
          IMAGES_BASENAME="$(echo "${IMAGES_BASENAME}" | tr '[:upper:]' '[:lower:]')"

          # Set IMAGES_PREFIX environment variable
          IMAGES_PREFIX="${REGISTRY}/${NAMESPACE}/${IMAGES_BASENAME}"
          echo "Set IMAGES_PREFIX to '${IMAGES_PREFIX}'"
          echo 'IMAGES_PREFIX<<GITHUB_ENV_EOF' >> $GITHUB_ENV
          echo "${IMAGES_PREFIX}" >> $GITHUB_ENV
          echo 'GITHUB_ENV_EOF' >> $GITHUB_ENV

      - name: Retag Docker images for GitHub Docker registry (tag commit SHA)
        env:
          IMAGES_PREFIX: 'app'
          IMAGES_TAG: ${{ github.sha }}
          NEW_IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          NEW_IMAGES_TAG: ${{ github.sha }}
        run: |
          # docker tag for each image
          docker compose -f docker-compose.yml config --images | while read -r IMAGE; do
            echo "Retag '${IMAGE}' to '${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}'"
            docker tag "${IMAGE}" "${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}"
          done

      - name: Push Docker images to GitHub Docker registry (tag commit SHA)
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          IMAGES_TAG: ${{ github.sha }}
        run: |
          # docker compose push
          docker compose \
              -f ./docker-compose.yml \
              --env-file .env \
              push

      - name: Retag Docker images for GitHub Docker registry (tag latest)
        if: env.DEPLOY_ENV == 'PROD' # Only run in production
        env:
          IMAGES_PREFIX: 'app'
          IMAGES_TAG: ${{ github.sha }}
          NEW_IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          NEW_IMAGES_TAG: latest
        run: |
          # docker tag for each image
          docker compose -f docker-compose.yml config --images | while read -r IMAGE; do
            echo "Retag '${IMAGE}' to '${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}'"
            docker tag "${IMAGE}" "${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}"
          done

      - name: Push Docker images to GitHub Docker registry (tag latest)
        if: env.DEPLOY_ENV == 'PROD' # Only run in production
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          IMAGES_TAG: latest
        run: |
          # docker compose push
          docker compose \
              -f ./docker-compose.yml \
              --env-file .env \
              push

  # Push Docker Hub job
  push-docker-hub:
    name: Push Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs:
      - push

    # Set GITHUB_TOKEN permissions for the job
    permissions:
      contents: read
      packages: read

    # Set environment variables for the job
    env:
      IMAGES_ORIGIN_PREFIX: ${{ needs.push.outputs.IMAGES_PREFIX }}

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set IMAGES_PREFIX for Docker Hub registry images
        env:
          NAMESPACE: ${{ vars.DOCKERHUB_USERNAME }}
          IMAGES_NAME: ${{ github.event.repository.name }}
        run: |
          # Convert variables to lowercase
          NAMESPACE="$(echo "${NAMESPACE}" | tr '[:upper:]' '[:lower:]')"
          IMAGES_NAME="$(echo "${IMAGES_NAME}" | tr '[:upper:]' '[:lower:]')"

          # Set IMAGES_PREFIX environment variable
          echo 'IMAGES_PREFIX<<DOCKER_ENV_EOF' >> $GITHUB_ENV
          echo "${NAMESPACE}/${IMAGES_NAME}" >> $GITHUB_ENV
          echo 'DOCKER_ENV_EOF' >> $GITHUB_ENV

      - name: Pull built Docker images from GitHub registry
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_ORIGIN_PREFIX }}
          IMAGES_TAG: ${{ github.sha }}
        run: docker compose -f docker-compose.yml pull

      - name: Retag Docker images for Docker Hub (tag commit SHA)
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_ORIGIN_PREFIX }}
          IMAGES_TAG: ${{ github.sha }}
          NEW_IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          NEW_IMAGES_TAG: ${{ github.sha }}
        run: |
          docker compose -f docker-compose.yml config --images | while read -r IMAGE; do
            echo "Retag '${IMAGE}' to '${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}'"
            docker tag "${IMAGE}" "${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}"
          done

      - name: Push Docker images for Docker Hub (tag commit SHA)
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          IMAGES_TAG: ${{ github.sha }}
        run: docker compose -f docker-compose.yml push

      - name: Retag Docker images for Docker Hub (tag 'latest')
        if: github.ref == 'refs/heads/main' # Only run on main branch
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_ORIGIN_PREFIX }}
          IMAGES_TAG: ${{ github.sha }}
          NEW_IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          NEW_IMAGES_TAG: latest
        run: |
          docker compose -f docker-compose.yml config --images | while read -r IMAGE; do
            echo "Retag '${IMAGE}' to '${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}'"
            docker tag "${IMAGE}" "${NEW_IMAGES_PREFIX}:${NEW_IMAGES_TAG}"
          done

      - name: Push Docker images for Docker Hub (tag 'latest')
        if: github.ref == 'refs/heads/main' # Only run on main branch
        env:
          IMAGES_PREFIX: ${{ env.IMAGES_PREFIX }}
          IMAGES_TAG: latest
        run: docker compose -f docker-compose.yml push
